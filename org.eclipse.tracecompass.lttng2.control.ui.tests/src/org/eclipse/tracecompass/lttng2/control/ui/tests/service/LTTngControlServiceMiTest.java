/**********************************************************************
 * Copyright (c) 2014 Ericsson
 *
 * All rights reserved. This program and the accompanying materials are
 * made available under the terms of the Eclipse Public License v1.0 which
 * accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Jonathan Rajotte - Support of machine interface
 **********************************************************************/

package org.eclipse.tracecompass.lttng2.control.ui.tests.service;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.net.URL;
import java.util.List;

import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.tracecompass.internal.lttng2.control.core.model.ISessionInfo;
import org.eclipse.tracecompass.internal.lttng2.control.core.model.TraceLogLevel;
import org.eclipse.tracecompass.internal.lttng2.control.core.model.TraceSessionState;
import org.eclipse.tracecompass.internal.lttng2.control.core.model.impl.SessionInfo;
import org.eclipse.tracecompass.internal.lttng2.control.ui.views.service.ILttngControlService;
import org.eclipse.tracecompass.internal.lttng2.control.ui.views.service.LTTngControlServiceConstants;
import org.eclipse.tracecompass.internal.lttng2.control.ui.views.service.LTTngControlServiceMI;

/**
 * @author ejorajo
 *
 */
public class LTTngControlServiceMiTest extends LTTngControlServiceTest {

    private static final String MI_TEST_STREAM = "LTTngServiceMiTest.cfg";

    @Override
    protected ILttngControlService getControlService() {
        try {
            URL resource = LTTngControlServiceMI.class.getResource(LTTngControlServiceConstants.MI_XSD_FILENAME);
            return new LTTngControlServiceMI(getShell(), resource);
        } catch (ExecutionException e) {
            return null;
        }
    }

    @Override
    public void testGetSessionNameGarbage() {
        try {
            fShell.setScenario(SCEN_GET_SESSION_GARBAGE_OUT);
            fService.getSessionNames(new NullProgressMonitor());
        } catch (ExecutionException e) {
            // Success. Parsing of garbage result in an ExecutionException
            // generated by the XML document parser: Unable to parse the xml
            // document.
        }
    }

    @Override
    public void testCreateLiveSession() throws ExecutionException {
        fShell.setScenario(SCEN_CREATE_LIVE_SESSION);

        ISessionInfo params = new SessionInfo("mysession");
        params.setLive(true);
        params.setStreamedTrace(true);
        params.setNetworkUrl("net://127.0.0.1");
        ISessionInfo sessionInfo = fService.createSession(params, new NullProgressMonitor());
        assertNotNull(sessionInfo);
        assertEquals("mysession", sessionInfo.getName());
        assertEquals(TraceSessionState.INACTIVE, sessionInfo.getSessionState());
        assertTrue(sessionInfo.isStreamedTrace());
        assertTrue(sessionInfo.isLive());
        assertEquals("tcp4://127.0.0.1:5342/ [data: 5343]", sessionInfo.getSessionPath());
        List<String> names = fService.getSessionNames(new NullProgressMonitor());
        assertEquals(names.get(0), "mysession");
        fService.destroySession("mysession", new NullProgressMonitor());
    }

    @Override
    protected String getTestStream() {
        return MI_TEST_STREAM;
    }

    @Override
    protected TraceLogLevel getAllEventTraceLogLevel() {
        return TraceLogLevel.TRACE_DEBUG;
    }

    @Override
    public void testGetKernelProviderNoUstVerbose() {
        // Verbose mode in machine interface is deactivated. This test is
        // ignored.
    }

    @Override
    public void testCreateSession2_1() {
        // 2.1 is not supported by mi. This test is ignored.
    }

    @Override
    public void testGetKernelProviderNoUst3() {
        // Verbose mode in machine interface is deactivated. This test is
        // ignored.
    }

    @Override
    public void testGetKernelProviderNoKernelVerbose() {
        // Verbose mode in machine interface is deactivated. This test is
        // ignored.
    }

    @Override
    public void testCreateSessionVerbose2_1() {
        // Verbose mode in machine interface is deactivated. This test is
        // ignored.
    }

    @Override
    public void testDestroySessionVerbose() {
        // Verbose mode in machine interface is deactivated. This test is
        // ignored.
    }

    @Override
    public void testCreateSessionWithPrompt() {
        // TODO Investigate if this case can happen in production. If yes than
        // we need to rethinks the MI fetching and parsing.
    }

    @Override
    public void testAddContext() {
        // TODO This does not use mi feature.And currently the context enabling
        // is wrong for 2.6.
    }

    @Override
    public void testAddContextFailure() {
        // TODO This does not use mi feature.And currently the context enabling
        // is wrong for 2.6.
    }

    @Override
    public void testCreateSnapshotSession2_5() {
        // not applicable for MI
    }
}
